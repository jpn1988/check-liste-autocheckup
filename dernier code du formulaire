import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
from PIL import Image, ImageTk  # N√©cessaire pour manipuler les images

class StarRating(tk.Frame):
    def __init__(self, parent, max_stars=5, command=None):
        super().__init__(parent)
        self.command = command
        self.stars = []
        self.var = tk.IntVar(value=0)

        for i in range(1, max_stars + 1):
            star = tk.Label(self, text=f"{i}", width=2, relief=tk.RAISED, bg="lightgray")
            star.grid(row=0, column=i-1, padx=2)
            star.bind("<Button-1>", self.on_click)
            star.bind("<Enter>", self.on_enter)
            star.bind("<Leave>", self.on_leave)
            self.stars.append(star)

    def on_click(self, event):
        selected_star = int(event.widget.cget("text"))
        self.var.set(selected_star)
        self.update_stars(selected_star)
        if self.command:
            self.command(selected_star)

    def on_enter(self, event):
        hover_star = int(event.widget.cget("text"))
        self.update_stars(hover_star)

    def on_leave(self, event):
        self.update_stars(self.var.get())

    def update_stars(self, selected_star):
        for i, star in enumerate(self.stars, start=1):
            if i <= selected_star:
                star.config(bg="yellow", relief=tk.SUNKEN)
            else:
                star.config(bg="lightgray", relief=tk.RAISED)

class Section(tk.Frame):
    def __init__(self, parent, section_name, total_questions, toggle_command):
        super().__init__(parent)
        self.section_name = section_name
        self.total_questions = total_questions
        self.answered_count = 0
        self.vars = []
        self.toggle_command = toggle_command

        self.button = tk.Button(parent, text=f"{section_name} (0/{total_questions})", command=self.toggle_section)
        self.button.pack(fill="x", padx=10, pady=5)

        self.frame = tk.LabelFrame(parent, text=f"Questions {section_name}")
        self.frame.pack(fill="both", expand="yes", padx=10, pady=10)
        self.frame.pack_forget()

        # Charger l'image de l'appareil photo et la redimensionner pour √™tre 3 fois plus grande
        try:
            self.camera_image = ImageTk.PhotoImage(Image.open("camera_icon.png").resize((72, 72)))
        except FileNotFoundError:
            self.camera_image = None

        self.create_questions()

    def create_questions(self):
        self.add_field("Corrosion")
        self.add_separator()
        self.add_field("Rayure")
        self.add_separator()
        self.add_field("Impact")
        self.add_separator()
        self.add_field("D√©faut de peinture")
        self.add_separator()
        self.add_field("D√©faut d'alignement")
        self.add_separator()
        self.add_field("Autre d√©faut")
        self.add_separator()

        tk.Label(self.frame, text="√âvaluez l‚Äô√©tat visuel g√©n√©ral de 1 √† 5 ?", anchor="w").pack(anchor="w", pady=(10, 0))
        star_rating = StarRating(self.frame, command=self.on_star_selected)
        star_rating.pack(anchor="w", padx=20, pady=(0, 10))

        self.vars.append(star_rating.var)
        self.add_separator()

        self.add_field("Ajouter un commentaire", add_photo_button=False)
        self.add_separator()

    def add_field(self, label_text, add_photo_button=True):
        label = tk.Label(self.frame, text=f"{label_text} ?", anchor="w")
        label.pack(anchor="w")

        variable = tk.StringVar(value="")
        self.vars.append(variable)

        rb1 = tk.Radiobutton(self.frame, text="OUI", variable=variable, value="OUI", cursor="hand2", indicatoron=0,
                             command=lambda: self.handle_answer(variable, label, button_photo))
        rb2 = tk.Radiobutton(self.frame, text="NON", variable=variable, value="NON", cursor="hand2", indicatoron=0,
                             command=lambda: self.handle_answer(variable, label))

        rb1.pack(anchor="w")
        rb2.pack(anchor="w")

        button_photo = None
        if add_photo_button:
            if self.camera_image:
                button_photo = tk.Button(self.frame, image=self.camera_image, command=lambda: self.upload_photo(label), state="disabled")
            else:
                button_photo = tk.Button(self.frame, text="üì∑", command=lambda: self.upload_photo(label), state="disabled")
            button_photo.pack(anchor="w", padx=20, pady=(0, 10))

    def add_separator(self):
        separator = ttk.Separator(self.frame, orient="horizontal")
        separator.pack(fill="x", pady=5)

    def handle_answer(self, variable, label, button_photo=None):
        if variable.get() == "OUI" and button_photo:
            button_photo.config(state="normal")
        else:
            if "‚úì" not in label.cget('text'):
                label.config(text=f"{label.cget('text')} ‚úì")
                self.answered_count += 1
                self.update_button_text()

    def on_star_selected(self, rating):
        for widget in self.frame.winfo_children():
            if isinstance(widget, tk.Label) and "√âvaluez l‚Äô√©tat visuel g√©n√©ral" in widget.cget("text"):
                label = widget
                break
        
        if "‚úì" not in label.cget('text'):
            label.config(text=f"{label.cget('text')} ‚úì")
            self.answered_count += 1
            self.update_button_text()

    def upload_photo(self, label):
        file = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.jpeg;*.png;*.gif")])
        if file:
            messagebox.showinfo("Fichier s√©lectionn√©", f"Fichier s√©lectionn√© : {file}")
            if "‚úì" not in label.cget('text'):
                label.config(text=f"{label.cget('text')} ‚úì")
                self.answered_count += 1
                self.update_button_text()

    def update_button_text(self):
        checkmark = " ‚úì" if self.answered_count == self.total_questions else ""
        self.button.config(text=f"{self.section_name} ({self.answered_count}/{self.total_questions}){checkmark}")

    def toggle_section(self):
        if self.frame.winfo_viewable():
            self.frame.pack_forget()
        else:
            self.toggle_command(self)
            self.frame.pack(fill="both", expand="yes", padx=10, pady=10)

class InspectionForm(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Inspection de l'√©clairage et du vitrage")
        self.geometry("600x800")

        container = tk.Frame(self)
        container.pack(fill="both", expand=True)

        canvas = tk.Canvas(container)
        scrollbar = tk.Scrollbar(container, orient="vertical", command=canvas.yview)
        self.scrollable_frame = tk.Frame(canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.sections = []
        self.sections.append(Section(self.scrollable_frame, "Capot", 8, self.close_other_sections))
        self.sections.append(Section(self.scrollable_frame, "Parechoc", 8, self.close_other_sections))

        self.submit_button = tk.Button(self.scrollable_frame, text="Soumettre", command=self.submit)
        self.submit_button.pack(pady=10)

    def close_other_sections(self, current_section):
        for section in self.sections:
            if section != current_section and section.frame.winfo_viewable():
                section.frame.pack_forget()

    def submit(self):
        all_answered = all(section.answered_count == section.total_questions for section in self.sections)
        if not all_answered:
            messagebox.showwarning("Formulaire incomplet", "Veuillez r√©pondre √† toutes les questions avant de soumettre le formulaire.")
        else:
            response = messagebox.askyesno("Confirmation", "Voulez-vous vraiment soumettre le formulaire ?")
            if response:
                messagebox.showinfo("Soumission", "Formulaire soumis avec succ√®s !")
            else:
                messagebox.showinfo("Annulation", "Soumission annul√©e.")

if __name__ == "__main__":
    app = InspectionForm()
    app.mainloop()
